// Copyright 2014 The lime Authors.
// Use of this source code is governed by a 2-clause
// BSD-style license that can be found in the LICENSE file.

package main

import (
	"log"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"runtime"
)

func getPegparser() {
	cmd := exec.Command("go", "get", "github.com/quarnster/parser/pegparser")
	out, err := cmd.CombinedOutput()
	if err != nil {
		log.Println(err)
	}
	if s := string(out); s != "" {
		log.Println(s)
	}
}

func main() {
	getPegparser()

	header := `// Copyright 2016 The lime Authors.
// Use of this source code is governed by a 2-clause
// BSD-style license that can be found in the LICENSE file.

// This file was generated by tasks/gen_loaders.go and shouldn't be manually modified
`

	_, filename, _, _ := runtime.Caller(0)
	loaderspath := path.Join(path.Dir(filename), "..")

	loaders := [][]string{
		{
			path.Join(loaderspath, "json", "json.peg"),
			path.Join(loaderspath, "json"),
			"json_generated",
			"JsonFile,Values,Value,Null,Dictionary,Array,KeyValuePairs,KeyValuePair,QuotedText,Text,Integer,Float,Boolean,Spacing,Comment",
			"testdata/Default (OSX).sublime-keymap",
		},
		{
			path.Join(loaderspath, "plist", "plist.peg"),
			path.Join(loaderspath, "plist"),
			"plist_generated",
			"Comment,Spacing,KeyValuePair,KeyTag,StringTag,IntegerTag,BooleanTag,Value,Values,PlistFile,Plist",
			"testdata/C.plist",
		},
	}

	for _, loader := range loaders {
		log.Println("Generating from " + loader[0])

		gopaths := filepath.SplitList(os.ExpandEnv("$GOPATH"))
		for _, gopath := range gopaths {
			cmd := exec.Command(
				path.Join(gopath, "bin", "pegparser"),
				"-peg="+loader[0],
				"-outpath="+loader[1],
				"-outfile="+loader[2],
				"-ignore="+loader[3],
				"-testfile="+loader[4],
				"-header="+header,
				"-notest",
			)
			if err := cmd.Run(); err != nil {
				log.Println(err.Error())
			} else {
				break
			}
		}
	}
}
